What happens when you initialize a repository? Why do you need to do it?
	Creates a new repository in the current directory.
	No commits. No files added automatically.

How is the staging area different from the working directory and the repository?  What value do you think it offers?
	Intermediate area (list of files from working directory) that are getting ready to be committed together into the git repository in one bunch

How can you use the staging area to make sure you have one commit per logical
change?
	Only add those files with changes for the "logical change"; 
	this moves them to the staging area, which can all then be
	committed together with one message describing the change

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	When I am trying things out, or creating alternative versions (modes, languages), 
	or just tinkering on my own

How do the diagrams help you visualize the branch structure?
	Understand what comes from what, how features/explorations are related, 
	and if some branches need to be collapsed or are detached.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Code from both branches is merged into a common one.  There might be
	conflicts, which would need to be resolved manually, followed by
	a "git add" and then a "git commit".
	The diagram has two parents to the new merged commit.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Pro: takes care of most of the work
	Con: adds extra crud into the file; sometimes might be better to just read each file individually
